Electronic Measurement? That’s a job for BitScope & RasPi! Part 2
Karl-Ludwig Butte – Guest Writer






Skill level: Entry
In last issues article, we equipped the Raspberry Pi with a BitScope Micro add-on board and 
installed the BitScope DSO software. Now we are ready to delve into the fascinating field of 
electronic measurement with a full-fledged digital storage oscilloscope.

Furthermore we got acquainted with the user interface of the BitScope DSO software, as shown in 
Fig. 1:
 
Fig. 1: BitScope DSO software main screen elements (photo courtesy by BitScope Designs)
 In part one you have read that an oscilloscope measures electrical voltages. So let’s start by 
measuring the voltage of the Raspberry Pi itself. Identify the Channel Control Pad for Channel A (7) 
and set it to 2V per Div. This means that one square of the y-axis on the main screen represents 2 V. 
With 8 squares stacked up on the Y-axis we are able to measure 16V at the maximum. Now connect 
the red test lead to pin CHA and the black test lead to pin GND opposite of pin CHA of the BitScope 
Micro. Fig. 2 shows the pin layout of the BitScope Micro to help you to select the right pins:
 
Fig. 2:  Pin layout of the BitScope Micro (photo courtesy by BitScope Designs)
Press the top of the black test lead down, so that the metal gripper appears at the opposite side and 
connect to pin 4 of the GPIO pins of the Raspberry Pi. Do the same with the red test lead but connect 
it to pin 2 of the GPIO pins. Fig. 3 shows the setup:
 
Fig. 3: Measuring the +5V at the GPIO pins 2 and 4 of the Raspberry Pi
Look at the main screen of BitScopeDSO (1). The x-axis is the line in the middle and has small vertical 
lines to sub divide each square. This is our 0V line. But our yellow beam is in the middle of the third 
square above the x-axis. Because between pin 2, the plus pole, and pin 4, the minus pole, is a voltage 
of 5V and we set the channel control to 2 V/Div the horizontal line indicates exactly this voltage. In 
Fig. 4 I have inserted an extra scale in red for the y-axis for you to help interpreting the screen:
 
Fig. 4: Measuring +5V from the Rasperry Pi’s GPIO pins 2 and 4.
You may get a reference measurement with your multimeter, if you like. Could we measure other 
and higher voltages than 5V? Sure, but what about our input range? We have to change the input 
range with the channel control for channel A (7) to an appropriate value. While working with an 
oscilloscope you should always be aware about the settings of the instrument and the expected 
voltages in the circuit. 
Is this NE555 timer IC still working?
In our next experiment we want to find out if a NE555 timer IC is still functional. This IC is often used 
when a clock signal is required. For this experiment we need:
*	two 1 kOhm resistors (R1, R2)
*	one 0.1 µF capacitor (C1)
*	one 10 nF capacitor (C2)
*	one  NE555 timer IC (IC1)
*	one small breadboard
*	several test leads provided with the BitScope Micro 
Fig. 5 shows the circuit diagram and Fig.6 shows you how to implement this circuit on a breadboard. 
 
Fig. 5: Circuit diagram of the clock generator
 
Fig. 6: Implementation on a breadboard
When you have finished building the clock generator on the breadboard, set the time base control 
(6) to 50 µsec/Div and the Channel Control Pad for Channel A (7) to 2V per Div. In addition set the 
trigger controls (4) to MEAN. Our RasPi has enough power to supply the +5V the clock generator 
needs. Therefore connect a blue test lead from pin 4 of the Raspberry Pi’s GPIO pins (Gnd) to the Gnd 
connection of the breadboard and a green test lead from pin 2 of the Raspberry Pi’s GPIO (+5V) pins 
to the Vcc connection of the breadboard. Two more test lead connections are needed: Connect pin 3 
of the NE555 with CHA of the BitScope Micro and Gnd of the breadboard with Gnd of the BitScope 
Micro, opposite of CHA. Phew! Things get complicated fast. Look at Fig. 7 and make sure you have all 
the connections right:
 
Fig. 7: Connecting the clock generator to RasPi and BitScope Micro
 Look at the main screen of the BitScope DSO software (1) and you should see a similar square wave 
as in Fig. 8:
 
Fig. 8: Output of the clock generator circuit
This square wave proofs that our NE555 is still functional and could be used for our next electronics 
project. If you do not see a square wave, check your circuit for any errors. If all connections between 
the different parts and the Raspberry Pi are ok and you still don’t get a square wave it can be 
assumed that the NE555 or one of the other components is defect.

If your clock generator is operational you may try to find out the frequency with which our clock 
generator is running. For the answer you should look at Fig. 8 (or the measurement on your own 
screen) and remember what I wrote about measuring frequencies in part 1 last issue. As an aid I have 
drawn a line in red into the output diagram, showing that the period of the square wave is 200 µsec. 

In this second part we measured direct current and alternating current. Join me next month for the 
answer to this part’s exercise, some more experiments with the clock generator and we will find out 
how to put an oscilloscope to good use for finding defects in electronic circuits. For all those 
interested in actually turning their Raspberry Pi into a digital storage oscilloscope with the BitScope 
Micro add-on board, it is available from BitScope Designs in Australia (www.bitscope.com). In 
Germany it is offered by BUTTE publishing company (www.BUTTE-verlag.de). In the UK you can order 
the BitScope Micro at shop.pimoroni.com and in Switzerland at www.pi-shop.ch. A German 
translation of this article is available at www.BUTTE-verlag.de.
