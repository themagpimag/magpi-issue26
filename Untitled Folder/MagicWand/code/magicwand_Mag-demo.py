#!/usr/bin/env python
#
# Copyright (c) 2014 OpenElectrons.com
# Magic Wand on Raspi-Proto with Magnetometer example script.
# for more information about MagicWand Kit for Raspberry Pi,  please visit:
# http://www.openelectrons.com/pages/63 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# History:
# Date      Author        Comments
# 05/14/14  Michael       Initial authoring.
#

#5x7 ascii characters lookup table
lookuptable = {
    ' ' : [0x00,0x00,0x00,0x00,0x00], '!' : [0x00,0x00,0x6f,0x00,0x00],
    '"' : [0x00,0x07,0x00,0x07,0x00], '#' : [0x14,0x7f,0x14,0x7f,0x14],
    '$' : [0x00,0x07,0x04,0x1e,0x00], '%' : [0x23,0x13,0x08,0x64,0x62],
    '&' : [0x36,0x49,0x56,0x20,0x50], '\'' : [0x00,0x00,0x07,0x00,0x00],
    '(' : [0x00,0x1c,0x22,0x41,0x00], ')' : [0x00,0x41,0x22,0x1c,0x00],
    '*' : [0x14,0x08,0x3e,0x08,0x14], '+' : [0x08,0x08,0x3e,0x08,0x08],
    ',' : [0x00,0x50,0x30,0x00,0x00], '-' : [0x08,0x08,0x08,0x08,0x08],
    '.' : [0x00,0x60,0x60,0x00,0x00], '/' : [0x20,0x10,0x08,0x04,0x02],
    '0' : [0x3e,0x51,0x49,0x45,0x3e], '1' : [0x00,0x42,0x7f,0x40,0x00],
    '2' : [0x42,0x61,0x51,0x49,0x46], '3' : [0x21,0x41,0x45,0x4b,0x31],
    '4' : [0x18,0x14,0x12,0x7f,0x10], '5' : [0x27,0x45,0x45,0x45,0x39],
    '6' : [0x3c,0x4a,0x49,0x49,0x30], '7' : [0x01,0x71,0x09,0x05,0x03],
    '8' : [0x36,0x49,0x49,0x49,0x36], '9' : [0x06,0x49,0x49,0x29,0x1e],
    ':' : [0x00,0x36,0x36,0x00,0x00], ';' : [0x00,0x56,0x36,0x00,0x00],
    '<' : [0x08,0x14,0x22,0x41,0x00], '=' : [0x14,0x14,0x14,0x14,0x14],
    '>' : [0x00,0x41,0x22,0x14,0x08], '?' : [0x02,0x01,0x51,0x09,0x06],
    '@' : [0x3e,0x41,0x5d,0x49,0x4e], 'A' : [0x7e,0x09,0x09,0x09,0x7e],
    'B' : [0x7f,0x49,0x49,0x49,0x36], 'C' : [0x3e,0x41,0x41,0x41,0x22],
    'D' : [0x7f,0x41,0x41,0x41,0x3e], 'E' : [0x7f,0x49,0x49,0x49,0x41],
    'F' : [0x7f,0x09,0x09,0x09,0x01], 'G' : [0x3e,0x41,0x49,0x49,0x7a],
    'H' : [0x7f,0x08,0x08,0x08,0x7f], 'I' : [0x00,0x41,0x7f,0x41,0x00],
    'J' : [0x20,0x40,0x41,0x3f,0x01], 'K' : [0x7f,0x08,0x14,0x22,0x41],
    'L' : [0x7f,0x40,0x40,0x40,0x40], 'M' : [0x7f,0x02,0x0c,0x02,0x7f],
    'N' : [0x7f,0x04,0x08,0x10,0x7f], 'O' : [0x3e,0x41,0x41,0x41,0x3e],
    'P' : [0x7f,0x09,0x09,0x09,0x06], 'Q' : [0x3e,0x41,0x51,0x21,0x5e],
    'R' : [0x7f,0x09,0x19,0x29,0x46], 'S' : [0x46,0x49,0x49,0x49,0x31],
    'T' : [0x01,0x01,0x7f,0x01,0x01], 'U' : [0x3f,0x40,0x40,0x40,0x3f],
    'V' : [0x0f,0x30,0x40,0x30,0x0f], 'W' : [0x3f,0x40,0x30,0x40,0x3f],
    'X' : [0x63,0x14,0x08,0x14,0x63], 'Y' : [0x07,0x08,0x70,0x08,0x07],
    'Z' : [0x61,0x51,0x49,0x45,0x43], '[' : [0x3c,0x4a,0x49,0x29,0x1e],
    '\\' : [0x02,0x04,0x08,0x10,0x20], ']' : [0x00,0x41,0x7f,0x00,0x00],
    '^' : [0x04,0x02,0x01,0x02,0x04], '_' : [0x40,0x40,0x40,0x40,0x40],
    '`' : [0x00,0x00,0x03,0x04,0x00], 'a' : [0x20,0x54,0x54,0x54,0x78],
    'b' : [0x7f,0x48,0x44,0x44,0x38], 'c' : [0x38,0x44,0x44,0x44,0x20],
    'd' : [0x38,0x44,0x44,0x48,0x7f], 'e' : [0x38,0x54,0x54,0x54,0x18],
    'f' : [0x08,0x7e,0x09,0x01,0x02], 'g' : [0x0c,0x52,0x52,0x52,0x3e],
    'h' : [0x7f,0x08,0x04,0x04,0x78], 'i' : [0x00,0x44,0x7d,0x40,0x00],
    'j' : [0x20,0x40,0x44,0x3d,0x00], 'k' : [0x00,0x7f,0x10,0x28,0x44],
    'l' : [0x00,0x41,0x7f,0x40,0x00], 'm' : [0x7c,0x04,0x18,0x04,0x78],
    'n' : [0x7c,0x08,0x04,0x04,0x78], 'o' : [0x38,0x44,0x44,0x44,0x38],
    'p' : [0x7c,0x14,0x14,0x14,0x08], 'q' : [0x08,0x14,0x14,0x18,0x7c],
    'r' : [0x7c,0x08,0x04,0x04,0x08], 's' : [0x48,0x54,0x54,0x54,0x20],
    't' : [0x04,0x3f,0x44,0x40,0x20], 'u' : [0x3c,0x40,0x40,0x20,0x7c],
    'v' : [0x1c,0x20,0x40,0x20,0x1c], 'w' : [0x3c,0x40,0x30,0x40,0x3c],
    'x' : [0x44,0x28,0x10,0x28,0x44], 'y' : [0x0c,0x50,0x50,0x50,0x3c],
    'z' : [0x44,0x64,0x54,0x4c,0x44], '{' : [0x00,0x08,0x36,0x41,0x41],
    '|' : [0x00,0x00,0x7f,0x00,0x00], '}' : [0x41,0x41,0x36,0x08,0x00],
    '~' : [0x04,0x02,0x04,0x08,0x04],
    }

import time
import os, sys
from OpenElectrons_i2c import OpenElectrons_i2c
from OpenElectrons_LSM303 import MAG
    
test = 1
oe = OpenElectrons_i2c(0x38)
lsm = MAG()
str = "OpenElectrons.com"
length = len(str)
index = 0
test = 1
g = 9.81
t = .25
count = 0
print str

while test == 1:
    #turn leds off
    oe.simpleWriteByte(0xff)
    #get first value
    array = lsm.readArray(lsm.MAG_X_Y_Z | 0x80, 6)
    magraw = lsm.magnet(array, 0)
    time.sleep(t)
    #get second value
    array = lsm.readArray(lsm.MAG_X_Y_Z | 0x80, 6)
    magraw2 = lsm.magnet(array, 0)
    #subtract to find delta
    X = (magraw2 - magraw)
    #filter approximate still values
    if X <= 10 and X >= -10:
        X = 0
    
    #if moving from right to left display string. Values will be different depending on location and direction.
    if (magraw > 175 and X < 0):
        count = 0
        #time.sleep(.05)
        while index < length:
            for number in lookuptable[str[index]]:
                oe.simpleWriteByte(~number)
                time.sleep(.0025)
            index = index + 1
            #turn off leds for a short time to account for letter spacing
            oe.simpleWriteByte(0xff)
            time.sleep(.0075)
        #reset string
        index = 0
    #time.sleep(.75)
    
    
  
        
#Press Ctrl+C button on your keyboard to stop the program

